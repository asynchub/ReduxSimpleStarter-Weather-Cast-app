// Redux serves to construct the application state
// React provides the views to provide the application state
// Two libs are disconnected and react-redux is needed
// Application state is generated by reducer functions
// Reducer function returns the value for the key in state
// function combineReducers from redux takes reducers and adds them to rootReducer as to Global application state keys
// container is smart component, that is aware of application state
// component can be promoted to container to be aware of particular property of application state
// promote component to container by steps:
// import connect function from react-redux
// define mapStateToProps function passing the state and returning the object witn properties that are desired to be props for this component
// use connect function from react-redux to hook up component and mapStateToProps to get desired state properties into props of this component
// use connect upon export default statement to export container (smart component is now promoted to this container with desired props for this component)

import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';
import { createStore, applyMiddleware } from 'redux';

import App from './components/app';
import reducers from './reducers';

const createStoreWithMiddleware = applyMiddleware()(createStore);

ReactDOM.render(
  <Provider store={createStoreWithMiddleware(reducers)}>
    <App />
  </Provider>
  , document.querySelector('.container'));
